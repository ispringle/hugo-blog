<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Configs on ian.ist</title><link>http://ianist.neocities.org/config/</link><description>Recent content in Configs on ian.ist</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://ianist.neocities.org/config/index.xml" rel="self" type="application/rss+xml"/><item><title>Build</title><link>http://ianist.neocities.org/config/build/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://ianist.neocities.org/config/build/</guid><description>Introduction This is my org-publish build script. I was just writing directly to the build.el file, but then I started thinking about it, and that made no sense. If I&amp;rsquo;m using Orgmode to write a blog, I should be using it to write the thing that writes that thing that builds the blog! It&amp;rsquo;s elementary!
Why a build.el and not just include this in my emacs config so that it all automatically runs when I publish through emacs?</description></item><item><title>Doom Emacs Configuration</title><link>http://ianist.neocities.org/config/doom/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://ianist.neocities.org/config/doom/</guid><description>General Settings Bootstrappin' For some reason lexical-binding makes things faster. Let&amp;rsquo;s initialize all our files with this at the top.
Here&amp;rsquo;s config.el&amp;rsquo;s
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*- ;; DO NOT EDIT THIS FILE DIRECTLY ;; This is a file generated from a literate programing source file located at ;; `$HOME/.config/doom/config.org`. You should make any changes there and ;; regenerate it from Emacs org-mode using org-babel-tangle (C-c C-v t) Here&amp;rsquo;s init.</description></item><item><title>Github Workflow</title><link>http://ianist.neocities.org/config/github-workflow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://ianist.neocities.org/config/github-workflow/</guid><description>This is my Github workflow. This file is a literate file that uses org-tangle to &amp;ldquo;compile&amp;rdquo; the needed yaml for Github.
Workflows publish.yaml Triggers Step one, we declare the workflow, and when it can be triggered.
In this case, the workflow triggers on changes to the master branch:
name: GitHub Actions Vercel Production Deployment on: push: branches: - master We also are going to trigger when the upstream NextJS project, Sylvan, is updated, so we added a repository_dispatch trigger:</description></item><item><title>Literate Dotfiles</title><link>http://ianist.neocities.org/config/dotfiles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://ianist.neocities.org/config/dotfiles/</guid><description>These are my literate dotfiles. To compile and deploy these files you need to run (org-bable-tangle). There are no additional settings that are needed to tangle this. Running the above command will create all the needed directories and files, and compile the configs specified here and deploy them to the right locations. To update a config file, make the edits and then run the same (org-bable-tangle) function to update. Because of the :cache yes directive, Org-Babel will only change files if there are changes.</description></item><item><title>Server</title><link>http://ianist.neocities.org/config/server/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://ianist.neocities.org/config/server/</guid><description>About This is the literate file that defines a server. All of the source files for Lit Server are defined here and are &amp;ldquo;tangled&amp;rdquo; together with org-tangle. This is the only file that should ever be edited (other than the README).
README.org It seems a little weird to build an org file, with an org file. I&amp;rsquo;m really only doing this because the server directory is entry built from this org file, but the intention is that I compile the files in server locally and commit them.</description></item></channel></rss>